module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    //output outled, // HELP IT SHOULD WORK
    input externalbutton,
    
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  // CONNECTS WHATEVER SOURCES WE HAVE TO EXTERNAL INPUT OUTPUTS
    sig rst;                  // reset signal

    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      multi_seven_seg seg;
      blockit_beta gameMachine;


    }
      reset_conditioner reset_cond; // TODO: changing reset button to io_button[1] (center button)
      button_conditioner alchitrybutton; // test button using alchitry
      edge_detector buttonpress(#RISE(1), #FALL(0)); // edge detector of externalbutton 
      // edge_detector ram_updater(#RISE(1), #FALL(0)); // takes slowclock4th.value as input 
      multi_dec_ctr dec_ctr;

    }  

  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    io_led = 3x{{h00}};       // turn all LED off at first
    usb_tx = usb_rx;          // loop serial port
    io_seg = 8hff; // connect segments to the driver
    io_sel = 4hf; // connect digit select to the driver

    
    led = c{3b0, externalbutton};  // connect buttons to LEDs
      
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
      
    alchitrybutton.in = externalbutton; // TODO: LINK TO EXTERNAL BUTTON WHICH IS LINKED TO ONE OF THE BANKS OF BR, ALSO INSTANTIATE THE CONNECTION IN CONSTRAINTS
    buttonpress.in = alchitrybutton.out; 
    gameMachine.buttonpress = buttonpress.out;
    
    dec_ctr.inc = gameMachine.decimal_counter_increase; // previously gameMachine.decimal_counter_increase
    dec_ctr.rst = gameMachine.decimal_counter_rst;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
 

    case (io_dip[0]){
    h00:
      io_led[0] = gameMachine.currentrow[7:0];
      io_led[1] = gameMachine.currentrow[15:8];
    
    h01:
      io_led[0] = gameMachine.previousrow[7:0];
      io_led[1] = gameMachine.previousrow[15:8];
    
    h02:
      io_led[0] = gameMachine.score[7:0];
      io_led[1] = gameMachine.score[15:8];
    
    h03:
      io_led[0] = gameMachine.rowcounter[7:0];
      io_led[1] = gameMachine.rowcounter[15:8];
    h04:
      io_led[0] = gameMachine.currenttimer[7:0];
      io_led[1] = gameMachine.currenttimer[15:8];
    h05:
      io_led[0] = gameMachine.finaloutput[7:0];

    dec_ctr.inc = gameMachine.decimal_counter_increase;
    dec_ctr.rst = gameMachine.decimal_counter_rst;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    
}