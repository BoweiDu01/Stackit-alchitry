/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_10 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn_signal;
  adder_17 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn_signal(M_adder_alufn_signal),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_boolean_bool;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  reg [6-1:0] M_boolean_alufn_signal;
  boolean_18 boolean (
    .a(M_boolean_a),
    .b(M_boolean_b),
    .alufn_signal(M_boolean_alufn_signal),
    .bool(M_boolean_bool)
  );
  
  wire [16-1:0] M_shifter_shift;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [6-1:0] M_shifter_alufn_signal;
  shifter_19 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn_signal(M_shifter_alufn_signal),
    .shift(M_shifter_shift)
  );
  
  wire [1-1:0] M_compare_cmp;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  reg [6-1:0] M_compare_alufn_signal;
  compare_20 compare (
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .alufn_signal(M_compare_alufn_signal),
    .cmp(M_compare_cmp)
  );
  
  wire [32-1:0] M_multiplier_mul;
  reg [32-1:0] M_multiplier_a;
  reg [32-1:0] M_multiplier_b;
  multiplier_21 multiplier (
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .mul(M_multiplier_mul)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    zvn[2+0-:1] = M_adder_z;
    zvn[1+0-:1] = M_adder_v;
    zvn[0+0-:1] = M_adder_n;
    M_adder_alufn_signal = alufn_signal;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn_signal = alufn_signal;
    M_shifter_a = a;
    M_shifter_b = b[0+4-:5];
    M_shifter_alufn_signal = alufn_signal;
    M_compare_z = M_adder_z;
    M_compare_v = M_adder_v;
    M_compare_n = M_adder_n;
    M_compare_alufn_signal = alufn_signal;
    M_multiplier_a = a;
    M_multiplier_b = b;
    
    case (alufn_signal[4+1-:2])
      2'h0: begin
        out = alufn_signal[1+0-:1] ? M_multiplier_mul : M_adder_out;
      end
      2'h1: begin
        out = M_boolean_bool;
      end
      2'h2: begin
        out = M_shifter_shift;
      end
      2'h3: begin
        out = alufn_signal[3+0-:1] ? ~M_compare_cmp : M_compare_cmp;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
