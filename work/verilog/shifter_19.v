/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifter_19 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] shift
  );
  
  
  
  wire [16-1:0] M_shiftL8_out;
  reg [16-1:0] M_shiftL8_a;
  reg [1-1:0] M_shiftL8_pad;
  reg [1-1:0] M_shiftL8_shift;
  x_bit_left_shifter_23 shiftL8 (
    .a(M_shiftL8_a),
    .pad(M_shiftL8_pad),
    .shift(M_shiftL8_shift),
    .out(M_shiftL8_out)
  );
  
  wire [16-1:0] M_shiftL4_out;
  reg [16-1:0] M_shiftL4_a;
  reg [1-1:0] M_shiftL4_pad;
  reg [1-1:0] M_shiftL4_shift;
  x_bit_left_shifter_24 shiftL4 (
    .a(M_shiftL4_a),
    .pad(M_shiftL4_pad),
    .shift(M_shiftL4_shift),
    .out(M_shiftL4_out)
  );
  
  wire [16-1:0] M_shiftL2_out;
  reg [16-1:0] M_shiftL2_a;
  reg [1-1:0] M_shiftL2_pad;
  reg [1-1:0] M_shiftL2_shift;
  x_bit_left_shifter_25 shiftL2 (
    .a(M_shiftL2_a),
    .pad(M_shiftL2_pad),
    .shift(M_shiftL2_shift),
    .out(M_shiftL2_out)
  );
  
  wire [16-1:0] M_shiftL1_out;
  reg [16-1:0] M_shiftL1_a;
  reg [1-1:0] M_shiftL1_pad;
  reg [1-1:0] M_shiftL1_shift;
  x_bit_left_shifter_26 shiftL1 (
    .a(M_shiftL1_a),
    .pad(M_shiftL1_pad),
    .shift(M_shiftL1_shift),
    .out(M_shiftL1_out)
  );
  
  wire [16-1:0] M_shiftR8_out;
  reg [16-1:0] M_shiftR8_a;
  reg [1-1:0] M_shiftR8_pad;
  reg [1-1:0] M_shiftR8_shift;
  x_bit_right_shifter_27 shiftR8 (
    .a(M_shiftR8_a),
    .pad(M_shiftR8_pad),
    .shift(M_shiftR8_shift),
    .out(M_shiftR8_out)
  );
  
  wire [16-1:0] M_shiftR4_out;
  reg [16-1:0] M_shiftR4_a;
  reg [1-1:0] M_shiftR4_pad;
  reg [1-1:0] M_shiftR4_shift;
  x_bit_right_shifter_28 shiftR4 (
    .a(M_shiftR4_a),
    .pad(M_shiftR4_pad),
    .shift(M_shiftR4_shift),
    .out(M_shiftR4_out)
  );
  
  wire [16-1:0] M_shiftR2_out;
  reg [16-1:0] M_shiftR2_a;
  reg [1-1:0] M_shiftR2_pad;
  reg [1-1:0] M_shiftR2_shift;
  x_bit_right_shifter_29 shiftR2 (
    .a(M_shiftR2_a),
    .pad(M_shiftR2_pad),
    .shift(M_shiftR2_shift),
    .out(M_shiftR2_out)
  );
  
  wire [16-1:0] M_shiftR1_out;
  reg [16-1:0] M_shiftR1_a;
  reg [1-1:0] M_shiftR1_pad;
  reg [1-1:0] M_shiftR1_shift;
  x_bit_right_shifter_30 shiftR1 (
    .a(M_shiftR1_a),
    .pad(M_shiftR1_pad),
    .shift(M_shiftR1_shift),
    .out(M_shiftR1_out)
  );
  
  wire [16-1:0] M_shiftRA8_out;
  reg [16-1:0] M_shiftRA8_a;
  reg [1-1:0] M_shiftRA8_pad;
  reg [1-1:0] M_shiftRA8_shift;
  x_bit_arithmetic_right_shifter_31 shiftRA8 (
    .a(M_shiftRA8_a),
    .pad(M_shiftRA8_pad),
    .shift(M_shiftRA8_shift),
    .out(M_shiftRA8_out)
  );
  
  wire [16-1:0] M_shiftRA4_out;
  reg [16-1:0] M_shiftRA4_a;
  reg [1-1:0] M_shiftRA4_pad;
  reg [1-1:0] M_shiftRA4_shift;
  x_bit_arithmetic_right_shifter_32 shiftRA4 (
    .a(M_shiftRA4_a),
    .pad(M_shiftRA4_pad),
    .shift(M_shiftRA4_shift),
    .out(M_shiftRA4_out)
  );
  
  wire [16-1:0] M_shiftRA2_out;
  reg [16-1:0] M_shiftRA2_a;
  reg [1-1:0] M_shiftRA2_pad;
  reg [1-1:0] M_shiftRA2_shift;
  x_bit_arithmetic_right_shifter_33 shiftRA2 (
    .a(M_shiftRA2_a),
    .pad(M_shiftRA2_pad),
    .shift(M_shiftRA2_shift),
    .out(M_shiftRA2_out)
  );
  
  wire [16-1:0] M_shiftRA1_out;
  reg [16-1:0] M_shiftRA1_a;
  reg [1-1:0] M_shiftRA1_pad;
  reg [1-1:0] M_shiftRA1_shift;
  x_bit_arithmetic_right_shifter_34 shiftRA1 (
    .a(M_shiftRA1_a),
    .pad(M_shiftRA1_pad),
    .shift(M_shiftRA1_shift),
    .out(M_shiftRA1_out)
  );
  
  always @* begin
    M_shiftL8_a = a;
    M_shiftL8_pad = 1'h0;
    M_shiftL8_shift = b[3+0-:1];
    M_shiftL4_a = M_shiftL8_out;
    M_shiftL4_pad = 1'h0;
    M_shiftL4_shift = b[2+0-:1];
    M_shiftL2_a = M_shiftL4_out;
    M_shiftL2_pad = 1'h0;
    M_shiftL2_shift = b[1+0-:1];
    M_shiftL1_a = M_shiftL2_out;
    M_shiftL1_pad = 1'h0;
    M_shiftL1_shift = b[0+0-:1];
    M_shiftR8_a = a;
    M_shiftR8_pad = 1'h0;
    M_shiftR8_shift = b[3+0-:1];
    M_shiftR4_a = M_shiftR8_out;
    M_shiftR4_pad = 1'h0;
    M_shiftR4_shift = b[2+0-:1];
    M_shiftR2_a = M_shiftR4_out;
    M_shiftR2_pad = 1'h0;
    M_shiftR2_shift = b[1+0-:1];
    M_shiftR1_a = M_shiftR2_out;
    M_shiftR1_pad = 1'h0;
    M_shiftR1_shift = b[0+0-:1];
    M_shiftRA8_a = a;
    M_shiftRA8_pad = a[15+0-:1];
    M_shiftRA8_shift = b[3+0-:1];
    M_shiftRA4_a = M_shiftRA8_out;
    M_shiftRA4_pad = a[15+0-:1];
    M_shiftRA4_shift = b[2+0-:1];
    M_shiftRA2_a = M_shiftRA4_out;
    M_shiftRA2_pad = a[15+0-:1];
    M_shiftRA2_shift = b[1+0-:1];
    M_shiftRA1_a = M_shiftRA2_out;
    M_shiftRA1_pad = a[15+0-:1];
    M_shiftRA1_shift = b[0+0-:1];
    
    case (alufn_signal[0+1-:2])
      2'h3: begin
        shift = M_shiftRA1_out;
      end
      2'h1: begin
        shift = M_shiftR1_out;
      end
      2'h0: begin
        shift = M_shiftL1_out;
      end
      default: begin
        shift = a;
      end
    endcase
  end
endmodule
