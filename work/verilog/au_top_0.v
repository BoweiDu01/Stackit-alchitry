/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    input externalbutton,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_1 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_gameMachine_decimal_counter_increase;
  wire [1-1:0] M_gameMachine_decimal_counter_rst;
  wire [16-1:0] M_gameMachine_currentrow;
  wire [16-1:0] M_gameMachine_previousrow;
  wire [16-1:0] M_gameMachine_rowcounter;
  wire [16-1:0] M_gameMachine_blockdirection;
  wire [16-1:0] M_gameMachine_currenttimer;
  wire [16-1:0] M_gameMachine_combocount;
  wire [16-1:0] M_gameMachine_score;
  wire [16-1:0] M_gameMachine_stack1;
  wire [16-1:0] M_gameMachine_stack2;
  wire [16-1:0] M_gameMachine_stack3;
  wire [16-1:0] M_gameMachine_stack4;
  wire [16-1:0] M_gameMachine_stack5;
  wire [16-1:0] M_gameMachine_distfromleft;
  wire [16-1:0] M_gameMachine_finaloutput;
  reg [1-1:0] M_gameMachine_buttonpress;
  blockit_beta_2 gameMachine (
    .clk(clk),
    .rst(rst),
    .buttonpress(M_gameMachine_buttonpress),
    .decimal_counter_increase(M_gameMachine_decimal_counter_increase),
    .decimal_counter_rst(M_gameMachine_decimal_counter_rst),
    .currentrow(M_gameMachine_currentrow),
    .previousrow(M_gameMachine_previousrow),
    .rowcounter(M_gameMachine_rowcounter),
    .blockdirection(M_gameMachine_blockdirection),
    .currenttimer(M_gameMachine_currenttimer),
    .combocount(M_gameMachine_combocount),
    .score(M_gameMachine_score),
    .stack1(M_gameMachine_stack1),
    .stack2(M_gameMachine_stack2),
    .stack3(M_gameMachine_stack3),
    .stack4(M_gameMachine_stack4),
    .stack5(M_gameMachine_stack5),
    .distfromleft(M_gameMachine_distfromleft),
    .finaloutput(M_gameMachine_finaloutput)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_alchitrybutton_out;
  reg [1-1:0] M_alchitrybutton_in;
  button_conditioner_4 alchitrybutton (
    .clk(clk),
    .in(M_alchitrybutton_in),
    .out(M_alchitrybutton_out)
  );
  wire [1-1:0] M_buttonpress_out;
  reg [1-1:0] M_buttonpress_in;
  edge_detector_5 buttonpress (
    .clk(clk),
    .in(M_buttonpress_in),
    .out(M_buttonpress_out)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_rst;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_6 dec_ctr (
    .clk(clk),
    .rst(M_dec_ctr_rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    usb_tx = usb_rx;
    io_seg = 8'hff;
    io_sel = 4'hf;
    led = {3'h0, externalbutton};
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    usb_tx = usb_rx;
    M_alchitrybutton_in = externalbutton;
    M_buttonpress_in = M_alchitrybutton_out;
    M_gameMachine_buttonpress = M_buttonpress_out;
    M_dec_ctr_inc = M_gameMachine_decimal_counter_increase;
    M_dec_ctr_rst = M_gameMachine_decimal_counter_rst;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    
    case (io_dip[0+7-:8])
      8'h00: begin
        io_led[0+7-:8] = M_gameMachine_currentrow[0+7-:8];
        io_led[8+7-:8] = M_gameMachine_currentrow[8+7-:8];
      end
      8'h01: begin
        io_led[0+7-:8] = M_gameMachine_previousrow[0+7-:8];
        io_led[8+7-:8] = M_gameMachine_previousrow[8+7-:8];
      end
      8'h02: begin
        io_led[0+7-:8] = M_gameMachine_score[0+7-:8];
        io_led[8+7-:8] = M_gameMachine_score[8+7-:8];
      end
      8'h03: begin
        io_led[0+7-:8] = M_gameMachine_rowcounter[0+7-:8];
        io_led[8+7-:8] = M_gameMachine_rowcounter[8+7-:8];
      end
      8'h04: begin
        io_led[0+7-:8] = M_gameMachine_currenttimer[0+7-:8];
        io_led[8+7-:8] = M_gameMachine_currenttimer[8+7-:8];
      end
      8'h05: begin
        io_led[0+7-:8] = M_gameMachine_finaloutput[0+7-:8];
        M_dec_ctr_inc = M_gameMachine_decimal_counter_increase;
        M_dec_ctr_rst = M_gameMachine_decimal_counter_rst;
        M_seg_values = M_dec_ctr_digits;
        io_seg = ~M_seg_seg;
      end
    endcase
  end
endmodule
