/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module blockit_regfile_12 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [15:0] currentrow,
    output reg [15:0] previousrow,
    output reg [15:0] rowcounter,
    output reg [0:0] blockdirection,
    output reg [15:0] currenttimer,
    output reg [15:0] combocount,
    output reg [15:0] score,
    output reg [15:0] stack1,
    output reg [15:0] stack2,
    output reg [15:0] stack3,
    output reg [15:0] stack4,
    output reg [15:0] stack5,
    output reg [15:0] ticklimit,
    output reg [15:0] distfromleft
  );
  
  
  
  reg [15:0] M_current_row_d, M_current_row_q = 16'hf800;
  reg [15:0] M_previous_row_d, M_previous_row_q = 16'hffff;
  reg [0:0] M_block_direction_d, M_block_direction_q = 1'h0;
  reg [15:0] M_row_counter_d, M_row_counter_q = 1'h1;
  reg [15:0] M_totalscore_d, M_totalscore_q = 1'h0;
  reg [15:0] M_combo_count_d, M_combo_count_q = 1'h0;
  reg [15:0] M_current_timer_d, M_current_timer_q = 1'h0;
  reg [15:0] M_tick_limit_d, M_tick_limit_q = 1'h0;
  reg [15:0] M_stack_1_d, M_stack_1_q = 1'h0;
  reg [15:0] M_stack_2_d, M_stack_2_q = 1'h0;
  reg [15:0] M_stack_3_d, M_stack_3_q = 1'h0;
  reg [15:0] M_stack_4_d, M_stack_4_q = 1'h0;
  reg [15:0] M_stack_5_d, M_stack_5_q = 1'h0;
  reg [15:0] M_dist_from_left_d, M_dist_from_left_q = 1'h0;
  reg [15:0] M_temp2_d, M_temp2_q = 1'h0;
  reg [15:0] M_temp_d, M_temp_q = 1'h0;
  
  always @* begin
    M_temp_d = M_temp_q;
    M_block_direction_d = M_block_direction_q;
    M_totalscore_d = M_totalscore_q;
    M_combo_count_d = M_combo_count_q;
    M_temp2_d = M_temp2_q;
    M_current_row_d = M_current_row_q;
    M_row_counter_d = M_row_counter_q;
    M_current_timer_d = M_current_timer_q;
    M_stack_3_d = M_stack_3_q;
    M_dist_from_left_d = M_dist_from_left_q;
    M_stack_4_d = M_stack_4_q;
    M_stack_5_d = M_stack_5_q;
    M_previous_row_d = M_previous_row_q;
    M_tick_limit_d = M_tick_limit_q;
    M_stack_1_d = M_stack_1_q;
    M_stack_2_d = M_stack_2_q;
    
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_current_row_d = data;
        end
        4'h1: begin
          M_previous_row_d = data;
        end
        4'h2: begin
          M_row_counter_d = data;
        end
        4'h3: begin
          M_totalscore_d = data;
        end
        4'h4: begin
          M_combo_count_d = data;
        end
        4'h5: begin
          M_current_timer_d = data;
        end
        4'h6: begin
          M_block_direction_d = data[0+0-:1];
        end
        4'h7: begin
          M_tick_limit_d = data;
        end
        4'h9: begin
          M_stack_1_d = data;
        end
        4'h9: begin
          M_stack_2_d = data;
        end
        4'ha: begin
          M_stack_3_d = data;
        end
        4'hb: begin
          M_stack_4_d = data;
        end
        4'hc: begin
          M_stack_5_d = data;
        end
        4'hd: begin
          M_dist_from_left_d = data;
        end
        4'he: begin
          M_temp2_d = data;
        end
        4'hf: begin
          M_temp_d = data;
        end
      endcase
      
      case (read_address_a)
        4'h0: begin
          out_a = M_current_row_q;
        end
        4'h1: begin
          out_a = M_previous_row_q;
        end
        4'h2: begin
          out_a = M_row_counter_q;
        end
        4'h3: begin
          out_a = M_totalscore_q;
        end
        4'h4: begin
          out_a = M_combo_count_q;
        end
        4'h5: begin
          out_a = M_current_timer_q;
        end
        4'h6: begin
          out_a = M_block_direction_q;
        end
        4'h7: begin
          out_a = M_tick_limit_q;
        end
        4'h9: begin
          out_a = M_stack_1_q;
        end
        4'h9: begin
          out_a = M_stack_2_q;
        end
        4'ha: begin
          out_a = M_stack_3_q;
        end
        4'hb: begin
          out_a = M_stack_4_q;
        end
        4'hc: begin
          out_a = M_stack_5_q;
        end
        4'hd: begin
          out_a = M_dist_from_left_q;
        end
        4'he: begin
          out_a = M_temp2_q;
        end
        4'hf: begin
          out_a = M_temp_q;
        end
        default: begin
          out_a = 1'h0;
        end
      endcase
      
      case (read_address_b)
        4'h0: begin
          out_b = M_current_row_q;
        end
        4'h1: begin
          out_b = M_previous_row_q;
        end
        4'h2: begin
          out_b = M_row_counter_q;
        end
        4'h3: begin
          out_b = M_totalscore_q;
        end
        4'h4: begin
          out_b = M_combo_count_q;
        end
        4'h5: begin
          out_b = M_current_timer_q;
        end
        4'h6: begin
          out_b = M_block_direction_q;
        end
        4'h7: begin
          out_b = M_tick_limit_q;
        end
        4'h9: begin
          out_b = M_stack_1_q;
        end
        4'h9: begin
          out_b = M_stack_2_q;
        end
        4'ha: begin
          out_b = M_stack_3_q;
        end
        4'hb: begin
          out_b = M_stack_4_q;
        end
        4'hc: begin
          out_b = M_stack_5_q;
        end
        4'hd: begin
          out_b = M_dist_from_left_q;
        end
        4'he: begin
          out_b = M_temp2_q;
        end
        4'hf: begin
          out_b = M_temp_q;
        end
        default: begin
          out_b = 1'h0;
        end
      endcase
    end
    currentrow = M_current_row_q;
    previousrow = M_previous_row_q;
    rowcounter = M_row_counter_q;
    score = M_totalscore_q;
    combocount = M_combo_count_q;
    currenttimer = M_current_timer_q;
    blockdirection = M_block_direction_q;
    stack1 = M_stack_1_q;
    stack2 = M_stack_2_q;
    stack3 = M_stack_3_q;
    stack4 = M_stack_4_q;
    stack5 = M_stack_5_q;
    distfromleft = M_dist_from_left_q;
    ticklimit = M_tick_limit_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_current_row_q <= 16'hf800;
      M_previous_row_q <= 16'hffff;
      M_block_direction_q <= 1'h0;
      M_row_counter_q <= 1'h1;
      M_totalscore_q <= 1'h0;
      M_combo_count_q <= 1'h0;
      M_current_timer_q <= 1'h0;
      M_tick_limit_q <= 1'h0;
      M_stack_1_q <= 1'h0;
      M_stack_2_q <= 1'h0;
      M_stack_3_q <= 1'h0;
      M_stack_4_q <= 1'h0;
      M_stack_5_q <= 1'h0;
      M_dist_from_left_q <= 1'h0;
      M_temp2_q <= 1'h0;
      M_temp_q <= 1'h0;
    end else begin
      M_current_row_q <= M_current_row_d;
      M_previous_row_q <= M_previous_row_d;
      M_block_direction_q <= M_block_direction_d;
      M_row_counter_q <= M_row_counter_d;
      M_totalscore_q <= M_totalscore_d;
      M_combo_count_q <= M_combo_count_d;
      M_current_timer_q <= M_current_timer_d;
      M_tick_limit_q <= M_tick_limit_d;
      M_stack_1_q <= M_stack_1_d;
      M_stack_2_q <= M_stack_2_d;
      M_stack_3_q <= M_stack_3_d;
      M_stack_4_q <= M_stack_4_d;
      M_stack_5_q <= M_stack_5_d;
      M_dist_from_left_q <= M_dist_from_left_d;
      M_temp2_q <= M_temp2_d;
      M_temp_q <= M_temp_d;
    end
  end
  
endmodule
