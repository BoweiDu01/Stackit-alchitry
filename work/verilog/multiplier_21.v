/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier_21 (
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] mul
  );
  
  
  
  wire [(9'h1f0+0)-1:0] M_fa_co;
  wire [(9'h1f0+0)-1:0] M_fa_s;
  reg [(9'h1f0+0)-1:0] M_fa_a;
  reg [(9'h1f0+0)-1:0] M_fa_b;
  reg [(9'h1f0+0)-1:0] M_fa_ci;
  
  genvar GEN_fa0;
  generate
  for (GEN_fa0=0;GEN_fa0<9'h1f0;GEN_fa0=GEN_fa0+1) begin: fa_gen_0
    fa_35 fa (
      .a(M_fa_a[GEN_fa0*(1)+(1)-1-:(1)]),
      .b(M_fa_b[GEN_fa0*(1)+(1)-1-:(1)]),
      .ci(M_fa_ci[GEN_fa0*(1)+(1)-1-:(1)]),
      .co(M_fa_co[GEN_fa0*(1)+(1)-1-:(1)]),
      .s(M_fa_s[GEN_fa0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  integer j;
  integer prev_row_ctr;
  integer curr_row_ctr;
  
  always @* begin
    mul[0+0-:1] = b[0+0-:1] & a[0+0-:1];
    M_fa_a[0+30-:31] = a[0+30-:31] & {5'h1e{b[1+0-:1]}};
    M_fa_b[0+30-:31] = a & {5'h1e{b[0+0-:1]}};
    M_fa_ci[0+0-:1] = 1'h0;
    for (i = 1'h1; i < 6'h20; i = i + 1) begin
      M_fa_ci[(i)*1+0-:1] = M_fa_co[(i - 1'h1)*1+0-:1];
    end
    mul[1+0-:1] = M_fa_s[0+0-:1];
    prev_row_ctr = 1'h0;
    curr_row_ctr = 5'h1f;
    for (i = 2'h2; i < 5'h1f; i = i + 1) begin
      for (j = 1'h0; j < 6'h20 - i; j = j + 1) begin
        M_fa_a[(curr_row_ctr + j)*1+0-:1] = a[(j)*1+0-:1] & b[(i)*1+0-:1];
        M_fa_b[(curr_row_ctr + j)*1+0-:1] = M_fa_s[(prev_row_ctr + 1'h1 + j)*1+0-:1];
        if (j == 1'h0) begin
          M_fa_ci[(curr_row_ctr + j)*1+0-:1] = 1'h0;
        end else begin
          M_fa_ci[(curr_row_ctr + j)*1+0-:1] = M_fa_co[(curr_row_ctr + j - 1'h1)*1+0-:1];
        end
      end
      mul[(i)*1+0-:1] = M_fa_s[(curr_row_ctr)*1+0-:1];
      prev_row_ctr = curr_row_ctr;
      curr_row_ctr = curr_row_ctr + 6'h20 - i;
    end
  end
endmodule
