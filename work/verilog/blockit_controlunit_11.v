/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module blockit_controlunit_11 (
    input clk,
    input rst,
    input buttonpress,
    input decrease_timer,
    input rowclock1,
    input [15:0] regfile_datain,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] alu_out_sel,
    output reg [3:0] regfile_write_address,
    output reg [3:0] regfile_read_address_a,
    output reg [3:0] regfile_read_address_b,
    output reg we_regfile,
    output reg decimal_counter_increase,
    output reg decimal_counter_rst,
    output reg [3:0] debug
  );
  
  
  
  localparam START_SET_TIMER_game_fsm = 7'd0;
  localparam DECREASE_GAMETIMER_game_fsm = 7'd1;
  localparam CHECK_GAMETIMER_game_fsm = 7'd2;
  localparam BRANCH_GAMETIMER_game_fsm = 7'd3;
  localparam INC_TICKCOUNT_game_fsm = 7'd4;
  localparam CHECK_TICKCOUNT_game_fsm = 7'd5;
  localparam BRANCH_TICKCOUNT_game_fsm = 7'd6;
  localparam RESET_TICKCOUNT_game_fsm = 7'd7;
  localparam DEC_TICKLIMIT_game_fsm = 7'd8;
  localparam IDLE_game_fsm = 7'd9;
  localparam BRANCH_BLOCK_DIR_game_fsm = 7'd10;
  localparam CURR_SHIFT_RIGHT_game_fsm = 7'd11;
  localparam BRANCH_SHIFT_RIGHT_game_fsm = 7'd12;
  localparam SET_SHIFT_LEFT_game_fsm = 7'd13;
  localparam CURR_SHIFT_LEFT_game_fsm = 7'd14;
  localparam BRANCH_SHIFT_LEFT_game_fsm = 7'd15;
  localparam SET_SHIFT_RIGHT_game_fsm = 7'd16;
  localparam CURR_PREV_ROW_COMPARE_BITWISE_game_fsm = 7'd17;
  localparam BRANCH_CURR_PREV_ROW_COMPARE_BITWISE_game_fsm = 7'd18;
  localparam REASSIGN_CURR_ROW_game_fsm = 7'd19;
  localparam CURR_PREV_ROW_CMPEQ_game_fsm = 7'd20;
  localparam BRANCH_CURR_PREV_ROW_CMPEQ_game_fsm = 7'd21;
  localparam REASSIGN_PREV_ROW_game_fsm = 7'd22;
  localparam CHECK_DISTFROMLEFT_game_fsm = 7'd23;
  localparam BRANCH_DISTFROMLEFT_game_fsm = 7'd24;
  localparam INC_DISTFROMLEFT_game_fsm = 7'd25;
  localparam SHIFT_DFL_BIT_CHECKED_game_fsm = 7'd26;
  localparam CHECK_BLOCK_LEN_game_fsm = 7'd27;
  localparam BRANCH_BLOCK_LEN_game_fsm = 7'd28;
  localparam INC_BLOCK_LEN_game_fsm = 7'd29;
  localparam SHIFT_BL_BIT_CHECKED_game_fsm = 7'd30;
  localparam BRANCH_STACK_game_fsm = 7'd31;
  localparam INCREASE_HEIGHT_STACK_5_game_fsm = 7'd32;
  localparam CHECK_DFL_ZERO_STACK_5_game_fsm = 7'd33;
  localparam BRANCH_DFL_INSERT_STACK_5_game_fsm = 7'd34;
  localparam STACK_5_INSERT_DFL_game_fsm = 7'd35;
  localparam INCREASE_HEIGHT_STACK_4_game_fsm = 7'd36;
  localparam CHECK_DFL_ZERO_STACK_4_game_fsm = 7'd37;
  localparam BRANCH_DFL_INSERT_STACK_4_game_fsm = 7'd38;
  localparam STACK_4_INSERT_DFL_game_fsm = 7'd39;
  localparam INCREASE_HEIGHT_STACK_3_game_fsm = 7'd40;
  localparam CHECK_DFL_ZERO_STACK_3_game_fsm = 7'd41;
  localparam BRANCH_DFL_INSERT_STACK_3_game_fsm = 7'd42;
  localparam STACK_3_INSERT_DFL_game_fsm = 7'd43;
  localparam INCREASE_HEIGHT_STACK_2_game_fsm = 7'd44;
  localparam CHECK_DFL_ZERO_STACK_2_game_fsm = 7'd45;
  localparam BRANCH_DFL_INSERT_STACK_2_game_fsm = 7'd46;
  localparam STACK_2_INSERT_DFL_game_fsm = 7'd47;
  localparam INCREASE_HEIGHT_STACK_1_game_fsm = 7'd48;
  localparam CHECK_DFL_ZERO_STACK_1_game_fsm = 7'd49;
  localparam BRANCH_DFL_INSERT_STACK_1_game_fsm = 7'd50;
  localparam STACK_1_INSERT_DFL_game_fsm = 7'd51;
  localparam REASSIGN_CURR_BLOCK_game_fsm = 7'd52;
  localparam INCREASE_COMBO_COUNT_game_fsm = 7'd53;
  localparam RESET_COMBO_COUNT_game_fsm = 7'd54;
  localparam INCREASE_SCORE_game_fsm = 7'd55;
  localparam INCREASE_ROWCOUNTER_game_fsm = 7'd56;
  localparam BRANCH_ROWCOUNTER_game_fsm = 7'd57;
  localparam CHECK_SCORELT30_game_fsm = 7'd58;
  localparam BRANCH_CHECK_SCORELT30_game_fsm = 7'd59;
  localparam BAD_SCORE_game_fsm = 7'd60;
  localparam CHECK_SCOREGT45_game_fsm = 7'd61;
  localparam BRANCH_CHECK_SCOREGT45_game_fsm = 7'd62;
  localparam AVG_SCORE_game_fsm = 7'd63;
  localparam GOOD_SCORE_game_fsm = 7'd64;
  localparam GAMEOVER_game_fsm = 7'd65;
  
  reg [6:0] M_game_fsm_d, M_game_fsm_q = START_SET_TIMER_game_fsm;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 1'h0;
    asel = 2'h0;
    bsel = 2'h0;
    we_regfile = 1'h0;
    regfile_write_address = 11'h457;
    regfile_read_address_a = 1'h0;
    regfile_read_address_b = 1'h0;
    alu_out_sel = 1'h0;
    debug = 1'h0;
    decimal_counter_increase = 1'h0;
    decimal_counter_rst = 1'h0;
    if (rst) begin
      M_game_fsm_d = START_SET_TIMER_game_fsm;
      decimal_counter_rst = 1'h1;
    end else begin
      
      case (M_game_fsm_q)
        START_SET_TIMER_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h5;
          regfile_read_address_b = 4'hf;
          M_game_fsm_d = IDLE_game_fsm;
        end
        DECREASE_GAMETIMER_game_fsm: begin
          alufn = 6'h01;
          regfile_read_address_a = 4'h5;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h8;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CHECK_GAMETIMER_game_fsm: begin
          alufn = 6'h33;
          regfile_read_address_a = 4'h5;
          asel = 2'h0;
          bsel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'hf;
          M_game_fsm_d = BRANCH_GAMETIMER_game_fsm;
        end
        BRANCH_GAMETIMER_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (~regfile_datain[0+0-:1]) begin
            M_game_fsm_d = DECREASE_GAMETIMER_game_fsm;
          end else begin
            M_game_fsm_d = CHECK_SCORELT30_game_fsm;
          end
        end
        CURR_SHIFT_RIGHT_game_fsm: begin
          alufn = 6'h21;
          regfile_read_address_a = 4'h0;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          M_game_fsm_d = BRANCH_SHIFT_RIGHT_game_fsm;
        end
        BRANCH_SHIFT_RIGHT_game_fsm: begin
          regfile_read_address_b = 4'h0;
          if (regfile_datain[0+0-:1] == 1'h1) begin
            M_game_fsm_d = SET_SHIFT_LEFT_game_fsm;
          end else begin
            M_game_fsm_d = IDLE_game_fsm;
          end
        end
        SET_SHIFT_LEFT_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h6;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h6;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CURR_SHIFT_LEFT_game_fsm: begin
          alufn = 6'h20;
          regfile_read_address_a = 4'h0;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          M_game_fsm_d = BRANCH_SHIFT_LEFT_game_fsm;
        end
        BRANCH_SHIFT_LEFT_game_fsm: begin
          regfile_read_address_b = 4'h0;
          if (regfile_datain[15+0-:1] == 1'h1) begin
            M_game_fsm_d = SET_SHIFT_RIGHT_game_fsm;
          end else begin
            M_game_fsm_d = IDLE_game_fsm;
          end
        end
        SET_SHIFT_RIGHT_game_fsm: begin
          alufn = 6'h01;
          regfile_read_address_a = 4'h6;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h6;
          M_game_fsm_d = IDLE_game_fsm;
        end
        CURR_PREV_ROW_COMPARE_BITWISE_game_fsm: begin
          alufn = 6'h18;
          regfile_read_address_a = 4'h0;
          regfile_read_address_b = 4'h1;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'hf;
          M_game_fsm_d = BRANCH_CURR_PREV_ROW_COMPARE_BITWISE_game_fsm;
        end
        BRANCH_CURR_PREV_ROW_COMPARE_BITWISE_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (regfile_datain == 16'h0000) begin
            M_game_fsm_d = CHECK_SCORELT30_game_fsm;
          end else begin
            M_game_fsm_d = REASSIGN_CURR_ROW_game_fsm;
          end
        end
        REASSIGN_CURR_ROW_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_b = 4'hf;
          asel = 2'h1;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          M_game_fsm_d = CURR_PREV_ROW_CMPEQ_game_fsm;
        end
        CURR_PREV_ROW_CMPEQ_game_fsm: begin
          alufn = 6'h33;
          regfile_read_address_a = 4'h0;
          regfile_read_address_b = 4'h1;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'hf;
          M_game_fsm_d = BRANCH_CURR_PREV_ROW_CMPEQ_game_fsm;
        end
        BRANCH_CURR_PREV_ROW_CMPEQ_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (regfile_datain[0+0-:1] == 1'h1) begin
            M_game_fsm_d = INCREASE_COMBO_COUNT_game_fsm;
          end else begin
            M_game_fsm_d = RESET_COMBO_COUNT_game_fsm;
          end
        end
        INCREASE_COMBO_COUNT_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h4;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h4;
          M_game_fsm_d = INCREASE_SCORE_game_fsm;
        end
        RESET_COMBO_COUNT_game_fsm: begin
          alu_out_sel = 2'h3;
          we_regfile = 1'h1;
          regfile_write_address = 4'h4;
          M_game_fsm_d = INCREASE_SCORE_game_fsm;
        end
        INCREASE_SCORE_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h3;
          regfile_read_address_b = 4'h4;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h3;
          M_game_fsm_d = INCREASE_ROWCOUNTER_game_fsm;
        end
        INCREASE_ROWCOUNTER_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_a = 4'h2;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          M_game_fsm_d = BRANCH_ROWCOUNTER_game_fsm;
        end
        BRANCH_ROWCOUNTER_game_fsm: begin
          regfile_read_address_b = 4'h2;
          if (regfile_datain[4+0-:1]) begin
            M_game_fsm_d = CHECK_SCORELT30_game_fsm;
          end else begin
            M_game_fsm_d = REASSIGN_PREV_ROW_game_fsm;
          end
        end
        REASSIGN_PREV_ROW_game_fsm: begin
          alufn = 6'h00;
          regfile_read_address_b = 4'h0;
          asel = 2'h1;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h1;
          M_game_fsm_d = IDLE_game_fsm;
        end
        BRANCH_CHECK_SCORELT30_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (regfile_datain == 1'h1) begin
            M_game_fsm_d = CHECK_SCOREGT45_game_fsm;
          end else begin
            M_game_fsm_d = BAD_SCORE_game_fsm;
          end
        end
        BAD_SCORE_game_fsm: begin
          we_regfile = 1'h1;
          alu_out_sel = 2'h3;
          regfile_write_address = 4'h0;
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
        CHECK_SCOREGT45_game_fsm: begin
          alufn = 6'h35;
          regfile_read_address_b = 4'h3;
          asel = 2'h3;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'hf;
          M_game_fsm_d = BRANCH_CHECK_SCOREGT45_game_fsm;
        end
        BRANCH_CHECK_SCOREGT45_game_fsm: begin
          regfile_read_address_b = 4'hf;
          if (regfile_datain == 1'h1) begin
            M_game_fsm_d = AVG_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = GOOD_SCORE_game_fsm;
          end
        end
        AVG_SCORE_game_fsm: begin
          we_regfile = 1'h1;
          alu_out_sel = 2'h2;
          regfile_write_address = 4'h0;
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
        GOOD_SCORE_game_fsm: begin
          we_regfile = 1'h1;
          alu_out_sel = 2'h1;
          regfile_write_address = 4'h0;
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
        GAMEOVER_game_fsm: begin
          debug = 4'hf;
          M_game_fsm_d = GAMEOVER_game_fsm;
        end
        IDLE_game_fsm: begin
          regfile_read_address_b = 4'h6;
          if (decrease_timer) begin
            M_game_fsm_d = CHECK_GAMETIMER_game_fsm;
          end else begin
            if (buttonpress) begin
              M_game_fsm_d = CURR_PREV_ROW_COMPARE_BITWISE_game_fsm;
            end else begin
              if (regfile_datain[0+0-:1] && rowclock1) begin
                M_game_fsm_d = CURR_SHIFT_LEFT_game_fsm;
              end else begin
                if (~regfile_datain[0+0-:1] && rowclock1) begin
                  M_game_fsm_d = CURR_SHIFT_RIGHT_game_fsm;
                end else begin
                  M_game_fsm_d = IDLE_game_fsm;
                end
              end
            end
          end
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
